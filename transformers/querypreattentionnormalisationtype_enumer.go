// Code generated by "enumer -type=QueryPreAttentionNormalisationType -trimprefix=QueryNormType -transform=snake -values -text -json -yaml config.go"; DO NOT EDIT.

package transformers

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _QueryPreAttentionNormalisationTypeName = "by_one_over_sqrt_head_dimby_embed_dim_div_num_headsby_one_over_sqrt_embed_dim_div_num_heads"

var _QueryPreAttentionNormalisationTypeIndex = [...]uint8{0, 25, 51, 91}

const _QueryPreAttentionNormalisationTypeLowerName = "by_one_over_sqrt_head_dimby_embed_dim_div_num_headsby_one_over_sqrt_embed_dim_div_num_heads"

func (i QueryPreAttentionNormalisationType) String() string {
	if i < 0 || i >= QueryPreAttentionNormalisationType(len(_QueryPreAttentionNormalisationTypeIndex)-1) {
		return fmt.Sprintf("QueryPreAttentionNormalisationType(%d)", i)
	}
	return _QueryPreAttentionNormalisationTypeName[_QueryPreAttentionNormalisationTypeIndex[i]:_QueryPreAttentionNormalisationTypeIndex[i+1]]
}

func (QueryPreAttentionNormalisationType) Values() []string {
	return QueryPreAttentionNormalisationTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _QueryPreAttentionNormalisationTypeNoOp() {
	var x [1]struct{}
	_ = x[QueryNormTypeByOneOverSqrtHeadDim-(0)]
	_ = x[QueryNormTypeByEmbedDimDivNumHeads-(1)]
	_ = x[QueryNormTypeByOneOverSqrtEmbedDimDivNumHeads-(2)]
}

var _QueryPreAttentionNormalisationTypeValues = []QueryPreAttentionNormalisationType{QueryNormTypeByOneOverSqrtHeadDim, QueryNormTypeByEmbedDimDivNumHeads, QueryNormTypeByOneOverSqrtEmbedDimDivNumHeads}

var _QueryPreAttentionNormalisationTypeNameToValueMap = map[string]QueryPreAttentionNormalisationType{
	_QueryPreAttentionNormalisationTypeName[0:25]:       QueryNormTypeByOneOverSqrtHeadDim,
	_QueryPreAttentionNormalisationTypeLowerName[0:25]:  QueryNormTypeByOneOverSqrtHeadDim,
	_QueryPreAttentionNormalisationTypeName[25:51]:      QueryNormTypeByEmbedDimDivNumHeads,
	_QueryPreAttentionNormalisationTypeLowerName[25:51]: QueryNormTypeByEmbedDimDivNumHeads,
	_QueryPreAttentionNormalisationTypeName[51:91]:      QueryNormTypeByOneOverSqrtEmbedDimDivNumHeads,
	_QueryPreAttentionNormalisationTypeLowerName[51:91]: QueryNormTypeByOneOverSqrtEmbedDimDivNumHeads,
}

var _QueryPreAttentionNormalisationTypeNames = []string{
	_QueryPreAttentionNormalisationTypeName[0:25],
	_QueryPreAttentionNormalisationTypeName[25:51],
	_QueryPreAttentionNormalisationTypeName[51:91],
}

// QueryPreAttentionNormalisationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func QueryPreAttentionNormalisationTypeString(s string) (QueryPreAttentionNormalisationType, error) {
	if val, ok := _QueryPreAttentionNormalisationTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _QueryPreAttentionNormalisationTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to QueryPreAttentionNormalisationType values", s)
}

// QueryPreAttentionNormalisationTypeValues returns all values of the enum
func QueryPreAttentionNormalisationTypeValues() []QueryPreAttentionNormalisationType {
	return _QueryPreAttentionNormalisationTypeValues
}

// QueryPreAttentionNormalisationTypeStrings returns a slice of all String values of the enum
func QueryPreAttentionNormalisationTypeStrings() []string {
	strs := make([]string, len(_QueryPreAttentionNormalisationTypeNames))
	copy(strs, _QueryPreAttentionNormalisationTypeNames)
	return strs
}

// IsAQueryPreAttentionNormalisationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i QueryPreAttentionNormalisationType) IsAQueryPreAttentionNormalisationType() bool {
	for _, v := range _QueryPreAttentionNormalisationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for QueryPreAttentionNormalisationType
func (i QueryPreAttentionNormalisationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for QueryPreAttentionNormalisationType
func (i *QueryPreAttentionNormalisationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("QueryPreAttentionNormalisationType should be a string, got %s", data)
	}

	var err error
	*i, err = QueryPreAttentionNormalisationTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for QueryPreAttentionNormalisationType
func (i QueryPreAttentionNormalisationType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for QueryPreAttentionNormalisationType
func (i *QueryPreAttentionNormalisationType) UnmarshalText(text []byte) error {
	var err error
	*i, err = QueryPreAttentionNormalisationTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for QueryPreAttentionNormalisationType
func (i QueryPreAttentionNormalisationType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for QueryPreAttentionNormalisationType
func (i *QueryPreAttentionNormalisationType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = QueryPreAttentionNormalisationTypeString(s)
	return err
}
