// Code generated by "enumer -type=AttentionType -trimprefix=AttentionType -transform=snake -values -text -json -yaml config.go"; DO NOT EDIT.

package transformers

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AttentionTypeName = "unknowngloballocal_sliding"

var _AttentionTypeIndex = [...]uint8{0, 7, 13, 26}

const _AttentionTypeLowerName = "unknowngloballocal_sliding"

func (i AttentionType) String() string {
	if i < 0 || i >= AttentionType(len(_AttentionTypeIndex)-1) {
		return fmt.Sprintf("AttentionType(%d)", i)
	}
	return _AttentionTypeName[_AttentionTypeIndex[i]:_AttentionTypeIndex[i+1]]
}

func (AttentionType) Values() []string {
	return AttentionTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AttentionTypeNoOp() {
	var x [1]struct{}
	_ = x[AttentionTypeUnknown-(0)]
	_ = x[AttentionTypeGlobal-(1)]
	_ = x[AttentionTypeLocalSliding-(2)]
}

var _AttentionTypeValues = []AttentionType{AttentionTypeUnknown, AttentionTypeGlobal, AttentionTypeLocalSliding}

var _AttentionTypeNameToValueMap = map[string]AttentionType{
	_AttentionTypeName[0:7]:        AttentionTypeUnknown,
	_AttentionTypeLowerName[0:7]:   AttentionTypeUnknown,
	_AttentionTypeName[7:13]:       AttentionTypeGlobal,
	_AttentionTypeLowerName[7:13]:  AttentionTypeGlobal,
	_AttentionTypeName[13:26]:      AttentionTypeLocalSliding,
	_AttentionTypeLowerName[13:26]: AttentionTypeLocalSliding,
}

var _AttentionTypeNames = []string{
	_AttentionTypeName[0:7],
	_AttentionTypeName[7:13],
	_AttentionTypeName[13:26],
}

// AttentionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AttentionTypeString(s string) (AttentionType, error) {
	if val, ok := _AttentionTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AttentionTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AttentionType values", s)
}

// AttentionTypeValues returns all values of the enum
func AttentionTypeValues() []AttentionType {
	return _AttentionTypeValues
}

// AttentionTypeStrings returns a slice of all String values of the enum
func AttentionTypeStrings() []string {
	strs := make([]string, len(_AttentionTypeNames))
	copy(strs, _AttentionTypeNames)
	return strs
}

// IsAAttentionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AttentionType) IsAAttentionType() bool {
	for _, v := range _AttentionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AttentionType
func (i AttentionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AttentionType
func (i *AttentionType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AttentionType should be a string, got %s", data)
	}

	var err error
	*i, err = AttentionTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AttentionType
func (i AttentionType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AttentionType
func (i *AttentionType) UnmarshalText(text []byte) error {
	var err error
	*i, err = AttentionTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for AttentionType
func (i AttentionType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for AttentionType
func (i *AttentionType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = AttentionTypeString(s)
	return err
}
