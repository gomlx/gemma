// Code generated by "enumer -type=GemmaType -transform=snake -values -text -json -yaml config.go"; DO NOT EDIT.

package transformers

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _GemmaTypeName = "unknown_gemma_typegemma_2bgemma_7bgemma2_2bgemma2_9bgemma2_27b"

var _GemmaTypeIndex = [...]uint8{0, 18, 26, 34, 43, 52, 62}

const _GemmaTypeLowerName = "unknown_gemma_typegemma_2bgemma_7bgemma2_2bgemma2_9bgemma2_27b"

func (i GemmaType) String() string {
	if i < 0 || i >= GemmaType(len(_GemmaTypeIndex)-1) {
		return fmt.Sprintf("GemmaType(%d)", i)
	}
	return _GemmaTypeName[_GemmaTypeIndex[i]:_GemmaTypeIndex[i+1]]
}

func (GemmaType) Values() []string {
	return GemmaTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _GemmaTypeNoOp() {
	var x [1]struct{}
	_ = x[UnknownGemmaType-(0)]
	_ = x[Gemma_2B-(1)]
	_ = x[Gemma_7B-(2)]
	_ = x[Gemma2_2B-(3)]
	_ = x[Gemma2_9B-(4)]
	_ = x[Gemma2_27B-(5)]
}

var _GemmaTypeValues = []GemmaType{UnknownGemmaType, Gemma_2B, Gemma_7B, Gemma2_2B, Gemma2_9B, Gemma2_27B}

var _GemmaTypeNameToValueMap = map[string]GemmaType{
	_GemmaTypeName[0:18]:       UnknownGemmaType,
	_GemmaTypeLowerName[0:18]:  UnknownGemmaType,
	_GemmaTypeName[18:26]:      Gemma_2B,
	_GemmaTypeLowerName[18:26]: Gemma_2B,
	_GemmaTypeName[26:34]:      Gemma_7B,
	_GemmaTypeLowerName[26:34]: Gemma_7B,
	_GemmaTypeName[34:43]:      Gemma2_2B,
	_GemmaTypeLowerName[34:43]: Gemma2_2B,
	_GemmaTypeName[43:52]:      Gemma2_9B,
	_GemmaTypeLowerName[43:52]: Gemma2_9B,
	_GemmaTypeName[52:62]:      Gemma2_27B,
	_GemmaTypeLowerName[52:62]: Gemma2_27B,
}

var _GemmaTypeNames = []string{
	_GemmaTypeName[0:18],
	_GemmaTypeName[18:26],
	_GemmaTypeName[26:34],
	_GemmaTypeName[34:43],
	_GemmaTypeName[43:52],
	_GemmaTypeName[52:62],
}

// GemmaTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GemmaTypeString(s string) (GemmaType, error) {
	if val, ok := _GemmaTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _GemmaTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to GemmaType values", s)
}

// GemmaTypeValues returns all values of the enum
func GemmaTypeValues() []GemmaType {
	return _GemmaTypeValues
}

// GemmaTypeStrings returns a slice of all String values of the enum
func GemmaTypeStrings() []string {
	strs := make([]string, len(_GemmaTypeNames))
	copy(strs, _GemmaTypeNames)
	return strs
}

// IsAGemmaType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i GemmaType) IsAGemmaType() bool {
	for _, v := range _GemmaTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for GemmaType
func (i GemmaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for GemmaType
func (i *GemmaType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("GemmaType should be a string, got %s", data)
	}

	var err error
	*i, err = GemmaTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for GemmaType
func (i GemmaType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for GemmaType
func (i *GemmaType) UnmarshalText(text []byte) error {
	var err error
	*i, err = GemmaTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for GemmaType
func (i GemmaType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for GemmaType
func (i *GemmaType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = GemmaTypeString(s)
	return err
}
